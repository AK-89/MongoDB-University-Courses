Chapter 1: Authentication

Homework 1.1 : Enable SCRAM-SHA-1

Answers:
mongo -u alice -p secret --eval "db=db.getSisterDB('admin');db.runCommand({getParameter: 1, authenticationMechanisms: 1})" --authenticationDatabase admin
mongo admin -u alice -p secret --eval "db.runCommand({getParameter: 1, authenticationMechanisms: 1})"
mongo admin --eval "db.auth('alice', 'secret');db.runCommand({getParameter: 1, authenticationMechanisms: 1})"


Homework 1.2 : Enabling Authentication on a Running Replica Set

#Connect to VM database
vagrant ssh database

# Kill all the mongod processes.
pkill mongod

# Setup the homework. 
cd ~/shared
./setup-hw-1.2.sh  

# Generate the keyfile in ~ 
openssl rand -base64 756 > $HOME/keyfile
chmod 600 $HOME/keyfile

# Safely shutdown members of replica set
cd ~/shared
mongo admin --port 31121 
use admin
db.shutdownServer()
mongo admin --port 31122
use admin
db.shutdownServer()
mongo admin --port 31120
use admin
db.shutdownServer()

# Restart the mongod servers with the keyfile.

mongod --dbpath "$HOME/M310-HW-1.2/r0" --logpath "$HOME/M310-HW-1.2/r0/mongod.log" --port 31120 --replSet TO_BE_SECURED --fork --keyFile $HOME/keyfile

mongod --dbpath "$HOME/M310-HW-1.2/r1" --logpath "$HOME/M310-HW-1.2/r1/mongod.log" --port 31121 --replSet TO_BE_SECURED --fork --keyFile $HOME/keyfile

mongod --dbpath "$HOME/M310-HW-1.2/r2" --logpath "$HOME/M310-HW-1.2/r2/mongod.log" --port 31122 --replSet TO_BE_SECURED --fork --keyFile $HOME/keyfile

# Create the admin user.
mongo admin --port 31120 
use admin 
db.createUser({user:"admin",pwd:"webscale",roles:["root"]})

# Exit from mongo shell and validate the homework.
./validate-hw-1.2.sh
Answer:
{ unauthorizedStatus: { "ok" : 0, "errmsg" : "not authorized on admin to execute command { replSetGetStatus: 1.0 }", "code" : 13 }, memberStatuses: ["PRIMARY","SECONDARY","SECONDARY"] }


Homework 1.3: Enabling Internal Authentication using X.509

Copy contents of handout m310-hw-1.3.zip to shared folder

#Connect to VM database
vagrant ssh database

# Kill all the mongod processes.
pkill mongod

# Create the required data directories.
mkdir -p ~/M310-HW-1.3/r0
mkdir -p ~/M310-HW-1.3/r1
mkdir -p ~/M310-HW-1.3/r2

# Launch the mongod instances.

mongod --dbpath "$HOME/M310-HW-1.3/r0" --logpath "$HOME/M310-HW-1.3/r0/mongod.log" --port 31130 --replSet TO_BE_SECURED --fork --sslMode re
quireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"

mongod --dbpath "$HOME/M310-HW-1.3/r1" --logpath "$HOME/M310-HW-1.3/r1/mongod.log" --port 31131 --replSet TO_BE_SECURED --fork --sslMode re
quireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"

mongod --dbpath "$HOME/M310-HW-1.3/r2" --logpath "$HOME/M310-HW-1.3/r2/mongod.log" --port 31132 --replSet TO_BE_SECURED --fork --sslMode re
quireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"


#Connect to mongo on any 1 port
mongo --host database.m310.mongodb.university --sslPEMKeyFile "certs/client.pem" --sslCAFile "certs/ca.pem" --ssl --port 31130 

#Initiate replica set
use admin
rs.initiate({
                 _id: 'TO_BE_SECURED',
                 members: [
                  { _id: 1, host: 'database.m310.mongodb.university:31130', priority: 1 },
                  { _id: 2, host: 'database.m310.mongodb.university:31131' },
                  { _id: 3, host: 'database.m310.mongodb.university:31132' }
                 ]
                })

# Create the admin user for the certificate.

db.createUser({user:"C=US,ST=New York,L=New York City,O=MongoDB,OU=University2,CN=M310 Client",roles:[{ role: "root", db: "admin" }]})

#Exit from mongo shell and validate the homework.
cd ~/shared
./validate-hw-1.3.sh
Answer:
{ unauthorizedStatus: { "ok" : 0, "errmsg" : "not authorized on admin to execute command { replSetGetStatus: 1.0 }", "code" : 13 }, memberStatuses: ["PRIMARY","SECONDARY","SECONDARY"] }


Homework 1.4: Migrating MONGODB-CR to SCRAM-SHA-1

#Connect to VM database
vagrant ssh database

# Kill all the mongod processes.
pkill mongod

#Setup the homework.
$ cd ~/shared
$ ./setup-hw-1.4.sh

# Upgrade the MONGODB-CR users to SCRAM-SHA-1.
mongo admin --eval "db.adminCommand({authSchemaUpgrade: 1})"

#Exit from mongo shell and validate the homework.
$ cd ~/shared
$ ./validate-hw-1.4.sh
Answer:
[ "SCRAM-SHA-1" ]

Homework 1.5: Enabling Mixed Authentication Mechanisms

#Connect to VM database
vagrant ssh database

# Kill all the mongod processes.
pkill mongod

# Generates the keyfile in ~.
openssl rand -base64 756 > ~/keyfile
chmod 400 ~/keyfile

# Create the required data directories.
mkdir -p ~/M310-HW-1.5/r0
mkdir -p ~/M310-HW-1.5/r1
mkdir -p ~/M310-HW-1.5/r2


# Launch the mongod instances with no authentication.

mongod --dbpath "~/M310-HW-1.5/r0" --logpath "~/M310-HW-1.5/r0/mongod.log" --port 31150 --replSet TO_BE_SECURED –fork

mongod --dbpath "~/M310-HW-1.5/r1" --logpath "~/M310-HW-1.5/r1/mongod.log" --port 31151--replSet TO_BE_SECURED –fork

mongod --dbpath "~/M310-HW-1.5/r2" --logpath "~/M310-HW-1.5/r2/mongod.log" --port 31152 --replSet TO_BE_SECURED --fork


#Start mongo and initiate replica set.

mongo admin --port 31150
use admin
rs.initiate({
                 _id: 'TO_BE_SECURED',
                 members: [
                  { _id: 1, host: 'database.m310.mongodb.university:31150', priority: 1 },
                  { _id: 2, host: 'database.m310.mongodb.university:31151' },
                  { _id: 3, host: 'database.m310.mongodb.university:31152' }
                 ]
                })

# Create the admin user.
mongo admin --port 31150
use admin
db.createUser({user: "will", pwd: "$uperAdmin", roles: ["root"]})

# Shutdown the mongod instances.

mongo admin --port 31150 
use admin
db.shutdownServer()

mongo admin --port 31151
use admin
db.shutdownServer()

mongo admin --port 31152
use admin
db.shutdownServer()

#Restart mongod instances with the keyfile configuration.

mongod --dbpath "~/M310-HW-1.5/r0" --logpath "~/M310-HW-1.5/r0/mongod.log" --port 31150 --replSet TO_BE_SECURED --fork --keyFile ~/keyfile --sslMode requireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"

mongod --dbpath "~/M310-HW-1.5/r1" --logpath "~/M310-HW-1.5/r1/mongod.log" --port 31151 --replSet TO_BE_SECURED --fork --keyFile ~/keyfile --sslMode requireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"

mongod --dbpath "~/M310-HW-1.5/r2" --logpath "~/M310-HW-1.5/r2/mongod.log" --port 31152 --replSet TO_BE_SECURED --fork --keyFile ~/keyfile --sslMode requireSSL --clusterAuthMode x509 --sslPEMKeyFile "certs/server.pem" --sslCAFile "certs/ca.pem"

# Create another user for the certificate.
mongo --host database.m310.mongodb.university --sslPEMKeyFile "certs/client.pem" --sslCAFile "certs/ca.pem" --ssl --port 31150ile "certs/ca.pem" --ssl --port 31130
use admin
db.auth("will","$uperAdmin")
db.createUser({user: "C=US,ST=New York,L=New York City,O=MongoDB,OU=University2,CN=M310 Client", roles:[{ role: "userAdminAnyDatabase", db: "admin" }]})

# Validates the homework.
./validate-hw-1.5.sh
Answer:
{ unauthorizedStatus: { "ok" : 0, "errmsg" : "not authorized on admin to execute command { replSetGetStatus: 1.0 }", "code" : 13 }, memberStatuses: ["PRIMARY","SECONDARY","SECONDARY"], users: [{"_id":"admin.will","roles":[{"role":"root","db":"admin"}]},{"_id":"$external.C=US,ST=New York,L=New York City,O=MongoDB,OU=University2,CN=M310 Client","roles":[{"role":"userAdminAnyDatabase","db":"admin"}]}] }

Homework 1.6: Enabling LDAP Authentication on a Replica Set

Copy handout m310-hw-1.6.zip to shared folder and unzip

#Connect to VM infrastructure and setup homework.
vagrant ssh infrastructure
cd ~/shared
$ ./setup-hw-1.6.sh

#Configure saslauthd to automatically start and use LDAP as its mechanism.
sudo vi /etc/sysconfig/saslauthd
MECH=ldap 

#Configure saslauthd to talk to the LDAP server.
sudo vi /etc/saslauthd.conf
LDAP Server IP: infrastructure.m310.mongodb.university
LDAP Search Base: ou=Users,dc=mongodb,dc=com
LDAP Search Filter: (cn=%u)

#Start the saslauthd service.
sudo service saslauthd start

#Fix the permissions on the saslauthd socket directory.
sudo ls /var/run/saslauthd/
sudo chmod 755 /var/run/saslauthd

#Test saslauthd
testsaslauthd -u adam -p password ldap -f /var/run/saslauthd/mux



#Connect to VM database
vagrant ssh database

# Kill all the mongod processes.
pkill mongod

# Create the required data directories.
mkdir -p $HOME/M310-HW-1.6/r0
mkdir -p $HOME/M310-HW-1.6/r1
mkdir -p $HOME/M310-HW-1.6/r2

# Launch the mongod instances with no authentication.


mongod --dbpath ~/M310-HW-1.6/r0 --logpath ~/M310-HW-1.6/r0/mongod.log --port 31160 --replSet TO_BE_SECURED --fork --auth --setParameter authenticationMechanisms=PLAIN --setParameter saslauthdPath="/var/run/saslauthd/mux"

mongod --dbpath ~/M310-HW-1.6/r1 --logpath ~/M310-HW-1.6/r1/mongod.log --port 31161 --replSet TO_BE_SECURED --fork --auth --setParameter authenticationMechanisms=PLAIN --setParameter saslauthdPath="/var/run/saslauthd/mux"

mongod --dbpath ~/M310-HW-1.6/r2 --logpath ~/M310-HW-1.6/r2/mongod.log --port 31162 --replSet TO_BE_SECURED --fork --auth --setParameter authenticationMechanisms=PLAIN --setParameter saslauthdPath="/var/run/saslauthd/mux"

#Start mongo and initiate replica set.

mongo admin --port 31160
use admin
rs.initiate({
                 _id: 'TO_BE_SECURED',
                 members: [
                  { _id: 1, host: 'database.m310.mongodb.university:31160', priority: 1 },
                  { _id: 2, host: 'database.m310.mongodb.university:31161' },
                  { _id: 3, host: 'database.m310.mongodb.university:31162' }
                 ]
                })

#Create an account for adam.				
db.getSiblingDB("$external").createUser({user: 'adam',pwd: 'password', roles: [{role: 'root', db:'admin'}]})

db.getSiblingDB("$external").auth({mechanism: "PLAIN", user: 'adam',pwd: 'password', digestPassword: false})				
				
$ cd ~/shared
$ ./validate-hw-1.6.sh
Answer:
{ unauthorizedStatus: { "ok" : 0, "errmsg" : "not authorized on admin to execute command { replSetGetStatus: 1.0 }", "code" : 13 }, memberStatuses: ["PRIMARY","SECONDARY","SECONDARY"] }


